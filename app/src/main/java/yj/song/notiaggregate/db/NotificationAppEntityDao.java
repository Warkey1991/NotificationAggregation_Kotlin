package yj.song.notiaggregate.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTIFICATION_APP_ENTITY".
*/
public class NotificationAppEntityDao extends AbstractDao<NotificationAppEntity, String> {

    public static final String TABLENAME = "NOTIFICATION_APP_ENTITY";

    /**
     * Properties of entity NotificationAppEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PkgName = new Property(0, String.class, "pkgName", true, "PKG_NAME");
        public final static Property AppName = new Property(1, String.class, "appName", false, "APP_NAME");
        public final static Property Interpet = new Property(2, boolean.class, "interpet", false, "INTERPET");
    }


    public NotificationAppEntityDao(DaoConfig config) {
        super(config);
    }
    
    public NotificationAppEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTIFICATION_APP_ENTITY\" (" + //
                "\"PKG_NAME\" TEXT PRIMARY KEY NOT NULL ," + // 0: pkgName
                "\"APP_NAME\" TEXT," + // 1: appName
                "\"INTERPET\" INTEGER NOT NULL );"); // 2: interpet
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTIFICATION_APP_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NotificationAppEntity entity) {
        stmt.clearBindings();
 
        String pkgName = entity.getPkgName();
        if (pkgName != null) {
            stmt.bindString(1, pkgName);
        }
 
        String appName = entity.getAppName();
        if (appName != null) {
            stmt.bindString(2, appName);
        }
        stmt.bindLong(3, entity.getInterpet() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NotificationAppEntity entity) {
        stmt.clearBindings();
 
        String pkgName = entity.getPkgName();
        if (pkgName != null) {
            stmt.bindString(1, pkgName);
        }
 
        String appName = entity.getAppName();
        if (appName != null) {
            stmt.bindString(2, appName);
        }
        stmt.bindLong(3, entity.getInterpet() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public NotificationAppEntity readEntity(Cursor cursor, int offset) {
        NotificationAppEntity entity = new NotificationAppEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // pkgName
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // appName
            cursor.getShort(offset + 2) != 0 // interpet
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NotificationAppEntity entity, int offset) {
        entity.setPkgName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAppName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setInterpet(cursor.getShort(offset + 2) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(NotificationAppEntity entity, long rowId) {
        return entity.getPkgName();
    }
    
    @Override
    public String getKey(NotificationAppEntity entity) {
        if(entity != null) {
            return entity.getPkgName();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NotificationAppEntity entity) {
        return entity.getPkgName() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
